import { Connection, EntityOptions as BaseEntityOptions, EntitySchema, MongoRepository, ObjectType, Repository, TreeRepository } from 'typeorm';
import { ViewEntityOptions as BaseViewEntityOptions } from 'typeorm/decorator/options/ViewEntityOptions';
export declare const CONNECTION_KEY = "orm:getConnection";
export declare const ENTITY_MODEL_KEY = "entity_model_key";
export declare const EVENT_SUBSCRIBER_KEY = "event_subscriber_key";
export declare const ORM_MODEL_KEY = "__orm_model_key__";
export interface EntityOptions extends BaseEntityOptions {
    connectionName?: string;
}
export interface ViewEntityOptions extends BaseViewEntityOptions {
    connectionName?: string;
}
/**
 * Entity - typeorm
 * @param options EntityOptions
 */
export declare function EntityModel(options?: EntityOptions): ClassDecorator;
/**
 * Entity - typeorm
 * @param name string
 * @param options EntityOptions & connectionName
 */
export declare function EntityModel(name?: string, options?: EntityOptions): ClassDecorator;
/**
 * ViewEntity - typeorm
 * @param options ViewEntityOptions
 */
export declare function EntityView(options?: ViewEntityOptions): ClassDecorator;
/**
 * Entity - ViewEntity
 * @param name string
 * @param options ViewEntityOptions
 */
export declare function EntityView(name?: string, options?: ViewEntityOptions): ClassDecorator;
export declare function InjectEntityModel(modelKey?: any, connectionName?: string): (target: any, propertyKey: string) => void;
/**
 * EventSubscriber - typeorm
 * implements EntitySubscriberInterface
 */
export declare function EventSubscriberModel(options?: {
    connectionName?: string;
}): ClassDecorator;
/**
 * Gets repository for the given entity.
 */
export declare type getRepository = <Entity>(target: ObjectType<Entity> | EntitySchema<Entity> | string) => Repository<Entity>;
/**
 * Gets tree repository for the given entity class or name.
 * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.
 */
export declare type getTreeRepository = <Entity>(target: ObjectType<Entity> | EntitySchema<Entity> | string) => TreeRepository<Entity>;
/**
 * Gets mongodb-specific repository for the given entity class or name.
 * Works only if connection is mongodb-specific.
 */
export declare type getMongoRepository = <Entity>(target: ObjectType<Entity> | EntitySchema<Entity> | string) => MongoRepository<Entity>;
/**
 * Gets custom entity repository marked with @EntityRepository decorator.
 */
export declare type getCustomRepository = <T>(customRepository: ObjectType<T>) => T;
export { OrmConfiguration as Configuration } from './configuration';
export * from './hook';
export * from './repository';
export declare type GetConnection = (instanceName?: string) => Connection;
/**
 * for hooks useEntityModel method
 * @param clz
 * @param instanceName
 */
export declare function useEntityModel<Entity>(clz: ObjectType<Entity>, connectionName?: string): Repository<Entity>;
//# sourceMappingURL=index.d.ts.map